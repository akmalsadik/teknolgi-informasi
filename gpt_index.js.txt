const express = require('express');
const { createServer } = require('http'); 
const { join, dirname } = require('path'); 
const { fileURLToPath } = require('url'); 
const { Server } = require('socket.io');
const sqlite3 = require('sqlite3');
const { open } = require('sqlite'); // Perbaikan penulisan

const app = express();
const server = createServer(app);
const io = new Server(server);

let db; // Variabel untuk menyimpan koneksi database

async function main() {
    db = await open({
        filename: 'chat.db',
        driver: sqlite3.Database
    });
    await db.exec('CREATE TABLE IF NOT EXISTS messages (id INTEGER PRIMARY KEY AUTOINCREMENT, client_offset TEXT UNIQUE, content TEXT);');
}

app.get('/', (req, res) => {
    res.sendFile(join(__dirname, 'index.html'));
});

io.on('connection', (socket) => {
    console.log('a user connected');
    
    socket.on('chat message', async (msg, clientOffset, callback) => {
        let result;
        try {
            if (clientOffset) {
                result = await db.run('INSERT INTO messages (content, client_offset) VALUES (?, ?)', msg, clientOffset);
            } else {
                result = await db.run('INSERT INTO messages (content) VALUES (?)', msg);
            }
        } catch (e) {
            if (e.errno == 19 && callback) {
                callback();
            } else {
                // Lakukan penanganan error jika diperlukan
                console.error(e);
                return;
            }
        }
        io.emit('chat message', msg, result ? result.lastID : null);
        if (callback) {
            callback(); // Pemanggilan callback setelah operasi basis data selesai dieksekusi
        }
    });
});

server.listen(3000, () => {
    console.log('server running at http://localhost:3000');
});

main(); // Panggil fungsi main untuk menginisialisasi koneksi database
